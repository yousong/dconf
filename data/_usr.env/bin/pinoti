#!/usr/bin/env bash
#
# Copyright 2018 (c) Yousong Zhou
#
# This script can be used to debug "no space left on device due to inotify
# "max_user_watches" limit".  It will output processes using inotify methods
# for watching file system activities, along with HOW MANY directories each
# inotify fd watches
#
# A temporary method of working around the said issue above, tune up the limit.
# It's a per-user limit
#
# 	sudo sysctl fs.inotify.max_user_watches=81920
#
# In case you also wonder why "sudo systemctl restart sshd" notifies inotify
# errors, it's from blue systemd-tty-ask-password-agent
#
#	execve("/usr/bin/systemd-tty-ask-password-agent", ["/usr/bin/systemd-tty-ask-passwor"..., "--watch"], [/* 16 vars */]) = 0
#	inotify_init1(O_CLOEXEC)                = 4
#	inotify_add_watch(4, "/run/systemd/ask-password", IN_CLOSE_WRITE|IN_MOVED_TO) = -1 ENOSPC (No space left on device)
#
# Other times it's inotify_init() returning EMFILE resulting "Too many open
# files".  This can be caused by limit on max number of inotify fd instance
#
# 	sudo sysctl fs.inotify.max_user_instances=1280
#
# Sample output
#
#	âžœ  ~ sudo pinoti | column -t
#	root  systemd          1      /proc/1/fdinfo/10     1    /usr/lib/systemd/systemd
#	root  systemd          1      /proc/1/fdinfo/14     4    /usr/lib/systemd/systemd
#	root  systemd          1      /proc/1/fdinfo/32     4    /usr/lib/systemd/systemd
#	root  systemd          1      /proc/1/fdinfo/41     3    /usr/lib/systemd/systemd
#	root  systemd          1      /proc/1/fdinfo/42     3    /usr/lib/systemd/systemd
#	root  systemd-udevd    468    /proc/468/fdinfo/7    7    /usr/lib/systemd/systemd-udevd
#	root  crond            698    /proc/698/fdinfo/5    3    /usr/sbin/crond
#	root  rsyslogd         1090   /proc/1090/fdinfo/5   2    /usr/sbin/rsyslogd
#	root  kubelet          1092   /proc/1092/fdinfo/10  2    /usr/bin/kubelet
#	root  kubelet          1092   /proc/1092/fdinfo/13  1    /usr/bin/kubelet
#	root  kubelet          1092   /proc/1092/fdinfo/29  0    /usr/bin/kubelet
#	root  kubelet          1092   /proc/1092/fdinfo/33  592  /usr/bin/kubelet
#	root  kubelet          1092   /proc/1092/fdinfo/35  1    /usr/bin/kubelet
#	root  kube-controller  5159   /proc/5159/fdinfo/11  1    /usr/local/bin/kube-controller-manager
#	root  kube-proxy       7247   /proc/7247/fdinfo/3   1    /usr/local/bin/kube-proxy
#	root  sdnagent         19962  /proc/19962/fdinfo/8  2    /opt/yunion/bin/sdnagent
#
# Example usage
#
# 	# count total inotify instances
# 	sudo pinoti | wc -l
#
# 	# count total inotify watches
# 	sudo pinoti | cut -f5 -d' ' | paste -sd+ | bc
#
# The script is adapted from https://stackoverflow.com/questions/13758877/how-do-i-find-out-what-inotify-watches-have-been-registered/48938640#48938640
#
set -o errexit
set -o pipefail

usage() {
	local prog="$(basename "$0")"
	echo "usage: $prog [-u users|-a]" >&2
	echo "usage: $prog -h" >&2
	exit 0
}

uopt=(-u root)
while [ "$#" -gt 0 ]; do
	case "$1" in
		-a)
			uopt=()
			shift 1
			;;
		-u)
			uopt=(-u "$2")
			shift 2
			;;
		*)
			usage
			;;
	esac
done

# Output field identifier list
#
# 	K	task id
# 	c	command name
# 	u	user id
# 	f	file descriptor
# 	n	file name
#
# We print only main threads' info by excluding sets with tid set
#
lsof +c 0 -F Kcufn -n -P "${uopt[@]}" \
	| while read f; do \
		case "$f" in \
			f*)
				fd="${f:1}" \
				;; \
			n*)
				fname="${f:1}"; \
				if [ -z "$tid" -a "$fname" = inotify ]; then \
					exe="$(readlink -f /proc/$pid/exe || echo n/a)"; \
					fdinfo="/proc/$pid/fdinfo/$fd" ; \
					count="$(grep -c "^inotify" "$fdinfo" 2>/dev/null || true)"; \
					count="${count:--1}"; \
					echo "$user $name $pid $fdinfo $count $exe"; \
				fi \
				;; \
			p*) pid="${f:1}"; tid="" ;; \
			K*) tid="${f:1}" ;; \
			c*) name="${f:1}" ;; \
			u*) \
				user="${f:1}"; \
				user="$(cut -d: -f3,1 /etc/passwd | grep ":$user$" | cut -d: -f1)"; \
				user="${user:-$f:1}"; \
				;; \
		esac; \
	done
