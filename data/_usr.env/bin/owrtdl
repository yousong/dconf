#!/usr/bin/env bash
#
# Copyright (C) 2018 Yousong Zhou <yszhou4tech@gmail.com>
#
# TODO
#
#  - Make it a web service
#  - Gen filelist locally by using modification time
#  - Rsync the filelist file
#
#  file Packages and Packages.manifest
#
#   - manifest file has additional fields
#     - Source: path to the dir containing package Makefile, e.g. feeds/packages/utils/coreutils
#     - Maintainer: Name <email>
#
#  file sha256sums: only for targets
#
#  Pagination: compute continuation, resource preservation
#
#  Gen targest and architectures
#
#	rsync \
#		-r \
#		--filter='+ */' \
#		--filter='+ sha256sums' \
#		--filter='+ Packages.manifest' \
#		--filter='- *' 'rsync://downloads.openwrt.org/downloads' \
#
set -o errexit

o_self="$0"
o_selfbase="$(basename "$o_self")"

o_host="${o_host:-downloads.lede-project.org}"
o_addr="${o_addr:-$o_host}"
o_basehttpurl="${o_basehttpurl:-http://$o_host}"
o_rsyncurl="${o_rsyncurl:-rsync://$o_host/downloads}"
o_filelist="${o_filelist:-$HOME/owrtdl_filelist}"

o_fmt=url

__errmsg() {
	echo "$o_selfbase: $*" >&2
}

prep() {
	__errmsg "file list missing: $o_filelist"
	__errmsg "downloading...  this can take a while"
	prep_
	__errmsg "download complete"
}

# Get file lists (circa. 104MB as of 2018-05-16)
prep_() {
	rsync -r "$o_rsyncurl" >"$o_filelist.1"
	mv "$o_filelist.1" "$o_filelist"
}

lines_to_url() {
	awk '{ print $NF }' | sed "s#^#$o_basehttpurl/#"
}

lines_to_line() {
	cat
}

filter() {
	local ffn1="$(mktemp -t owrtdl.tmp1.XXXXXXXXXXX)"
	local ffn2="$(mktemp -t owrtdl.tmp2.XXXXXXXXXXX)"
	local r

	trap "rm -f $ffn1 $ffn2" TERM INT
	ln -sf "$o_filelist" "$ffn1"

	while [ "$#" -gt 0 ]; do
		r=0
		case "$1" in
			-v) r=1; grep -E -v "$2" "$ffn1" >"$ffn2"; shift 2; ;;
			-f) o_fmt="$2"; shift 2; ;;
			*) r=2; grep -E "$1" "$ffn1" >"$ffn2"; shift 1; ;;
		esac
		if [ "$r" -gt 0 ]; then
			rm -f "$ffn1"
			mv "$ffn2" "$ffn1"
		fi
	done

	cat "$ffn1" | "lines_to_$o_fmt"
	rm -f "$ffn1" "$ffn2"
}

usage() {
	cat >&2 <<EOF
Usage: $o_selfbase [regex] [-v regex] [-f fmt]
       $o_selfbase prep

    prep                prepare filelist
    <regex>             grep -E <regex>
    -v <regex>          grep -v -E <regex>
    -f <fmt>            <fmt> can be url, line

Chain filters on "$o_filelist" and output download URLs

Example

    $o_selfbase -v '\.ipk$' /armvirt/ initramfs
    $o_selfbase -v '\.ipk$' /malta/ initramfs snapshots
    $o_selfbase -v '\.ipk$' /malta/ initramfs snapshots
    $o_selfbase -v '\.ipk$' /x86/generic/ squashfs
EOF
}

if [ "$#" -lt 1 ]; then
	usage
	exit 0
elif [ "$1" = prep ]; then
	prep
else
	if [ ! -s "$o_filelist" ]; then
		prep
	fi
	filter "$@"
fi
