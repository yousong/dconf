"VBundle
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
set nocompatible		"be iMproved, required
filetype off			"required
" set the runtime path to include Vundle and initialize
set rtp+=$HOME/.vim/bundle/Vundle.vim
call vundle#begin()			"call with a path vundle#begin('~/some/path/here')
Plugin 'gmarik/Vundle.vim'	"Github username/reponame
"Plugin 'bling/vim-airline'
Plugin 'tpope/vim-fugitive' " Required by vim-airline for git repo.
Plugin 'terryma/vim-multiple-cursors'
"Plugin 'SirVer/ultisnips'	"The engine
"Plugin 'honza/vim-snippets'	"The snippets
Plugin 'mileszs/ack.vim'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/nerdcommenter'
Plugin 'tpope/vim-surround'
Plugin 'majutsushi/tagbar'
"Plugin 'godlygeek/tabular'
"Plugin 'Align'				"Name of vim-script.org package mirrors.
"Plugin 'altercation/vim-colors-solarized'
Plugin 'ycm-core/YouCompleteMe'
"Plugin 'kchmck/vim-coffee-script'	" L: CoffeeScript
"Plugin 'mattn/emmet-vim'		" L: HTML
"Plugin 'groenewege/vim-less'		" L: LESS
"Plugin 'alderz/smali-vim'		" L: Smali
Plugin 'cespare/vim-toml'		" L: TOML
Plugin 'chr4/nginx.vim'			" L: NGINX
Plugin 'fatih/vim-go'			" L: Go
Plugin 'rust-lang/rust.vim'		" L: Rust, rustfmt
Plugin 'racer-rust/vim-racer'		" L: Rust, completor
Plugin 'plasticboy/vim-markdown'	" L: Markdown
Plugin 'python-mode/python-mode'	" L: Python
call vundle#end()
filetype plugin indent on		"required

" pathogen, ol' buddy
"call pathogen#infect()

""""""" bling/vim-airline
let g:airline_highlighting_cache = 1
" disable tagbar integration (can be slow)
let g:airline#extensions#tagbar#enabled = 0
let g:airline#extensions#wordcount#enabled = 0
let g:airline#extensions#whitespace#enabled = 0
" disable fugitive integration (takes up space)
let g:airline#extensions#branch#enabled = 0
" show filename (no (compressed) path) in the tab
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'
" save tabline space
let g:airline#extensions#tabline#show_splits = 0
let g:airline#extensions#tabline#show_tab_type = 0
" no need to show "filetype<fileencoding[fileformat]"
let g:airline_section_x = ''
let g:airline_section_y = ''


""""""" mileszs/ack.vim
if executable('ag')
	let g:ackprg = 'ag --vimgrep'
endif

" let g:ack_mappings

""""""" ctrlpvim/ctrlp.vim
" use project-specific .vimrc settings as a root marker.  In the patched
" version, .vimrc has lower precedence over other markers like .git, .hg, etc.
" which means that when both .vimrc, .git are existent, .git will take effect
" and its corresponding custom command will succeed
let g:ctrlp_root_markers = ['.vimrc']

" when 'ignore' is set, output from command will subject to custom_ignore
" rules check
let g:ctrlp_user_command = {
	\ 'types': {
		\ 1: ['.git', 'cd %s && git ls-files -co --exclude-standard'],
		\ 2: ['.hg', 'hg --cwd %s locate -I .'],
		\ },
	\ 'fallback': 'find %s -type f',
	\ 'ignore': 1
	\ }
let g:ctrlp_custom_ignore = {
	\ 'dir':  '\v[\/]\.(git|hg|svn)$',
	\ 'file': '\v\.pyc$',
	\ }


""""""" scrooloose/nerdtree
"   q to quit
nmap <C-N> :NERDTree %:p:h<CR>
" How can I close vim if the only window left open is a NERDTree?
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
let NERDTreeIgnore = ['\.pyc$']
let NERDTreeMapOpenSplit = 's'
let NERDTreeMapOpenVSplit = 'v'


""""""" terryma/vim-multiple-cursors
"   <C-N> for NERDTree
"
" It's okay if the tty converts C-M input to newline as long as it works
" inside Vim.  See "stty -icrnl" for details
let g:multi_cursor_use_default_mapping = 0
let g:multi_cursor_start_word_key      = '<C-m>'
let g:multi_cursor_start_key           = 'g<C-m>'
let g:multi_cursor_next_key            = '<C-m>'
let g:multi_cursor_prev_key            = '<C-p>'
let g:multi_cursor_skip_key            = '<C-x>'
let g:multi_cursor_quit_key            = '<Esc>'
let g:multi_cursor_select_all_word_key = '<A-m>'
let g:multi_cursor_select_all_key      = 'g<A-m>'
" press g:multi_cursor_quit_key will not quit multi-cursor mode, instead it
" will continue in normal mode
let g:multi_cursor_exit_from_insert_mode = 0
let g:multi_cursor_exit_from_visual_mode = 0


""""""" ultisnips
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-f>"
let g:UltiSnipsJumpBackwardTrigger="<c-b>"
" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"


""""""" plasticboy/vim-markdown
let g:vim_markdown_folding_disabled = 1


""""""" majutsushi/tagbar
let g:tagbar_sort = 0				" show symbols on order of presence
let g:tagbar_silent = 1				" no auto info about symbol after updatetime
let g:tagbar_compact = 1			" no help info at the above
let g:tagbar_singleclick = 1		" jump on singleclick
nmap <F8> :TagbarToggle<CR>
augroup tagbar_group
	autocmd!
	autocmd FileType * :call tagbar#autoopen()
augroup END

" rst2ctags.py was taken from https://github.com/jszakmeister/rst2ctags
let g:tagbar_type_rst = {
	\ 'ctagstype': 'rst',
	\ 'ctagsbin' : $HOME . '/.usr.env/bin/rst2ctags.py',
	\ 'ctagsargs' : '-f - --sort=yes',
	\ 'kinds' : [
		\ 's:sections',
		\ 'i:images'
	\ ],
	\ 'sro' : '|',
	\ 'kind2scope' : {
		\ 's' : 'section',
	\ },
	\ 'sort': 0,
\ }

let g:tagbar_type_markdown = {
	\ 'ctagstype': 'markdown',
	\ 'ctagsbin' : $HOME . '/.usr.env/bin/markdown2ctags.py',
	\ 'ctagsargs' : '-f - --sort=yes',
	\ 'kinds' : [
		\ 's:sections',
		\ 'i:images'
	\ ],
	\ 'sro' : '|',
	\ 'kind2scope' : {
		\ 's' : 'section',
	\ },
	\ 'sort': 0,
\ }

let g:tagbar_type_smali = {
        \ 'ctagstype' : 'smali',
        \ 'kinds' : [
                \ 'f:field',
                \ 'm:method',
        \ ]
\ }


""""""" fatih/vim-go
" Read vim-go-tutorial for more: https://github.com/fatih/vim-go-tutorial
"
" A sample .vimrc conf from fatih:
" https://github.com/fatih/vim-go-tutorial/blob/master/vimrc
"
" - Use ctrl-t to jump back
" - Use :GoDefStack to view and select the jump stack
augroup go_group
	autocmd!
	autocmd FileType go noremap <buffer> <leader>s :split<CR>:exec("GoDef ".expand("<cword>"))<CR>
	autocmd FileType go noremap <buffer> <leader>v :vsplit<CR>:exec("GoDef ".expand("<cword>"))<CR>
	autocmd FileType go noremap <buffer> <leader>t :tab split<CR>:exec("GoDef ".expand("<cword>"))<CR>
	autocmd FileType go nnoremap <buffer> <leader>. <Esc>:exec "GoDef " . expand("<cword>")<Esc>
augroup END
"
" When enabled, "gocode -source" will be used to scan source code for a
" reliable experience.  It's slow.  Use binaries installed.
"
" Recent versions of vim-go will try to call gocode mode with options
" "-fallback-to-source -cache" when source mode is off
let g:go_gocode_propose_source = 1
"
" These are for builtin types and functions, they should be well known to all
" golang programmers and it's a short list on its own but can cause
" distraction when mixed with others
let g:go_gocode_propose_builtins = 0


""""""" rust-lang/rust
""""""" racer-rust/vim-racer
let g:rustfmt_autosave = 1
"
" requires
"
"  - racer from nightly channel
"  - rustup component add rust-src
"
let g:racer_experimental_completer = 1
augroup rust_group
	autocmd!
	autocmd FileType rust nmap <C-]> <Plug>(rust-def)
	autocmd FileType rust nmap <leader>s <Plug>(rust-def-split)
	autocmd FileType rust nmap <leader>v <Plug>(rust-def-vertical)
	autocmd FileType rust nmap <leader>t :tab split<CR><Plug>(rust-def-vertical)
	autocmd FileType rust nmap K <Plug>(rust-doc)
augroup END


""""""" python-mode/python-mode
" Additional project specific paths can be added to g:pymode_paths
"
" we have tagbar
let g:pymode_folding = 0
let g:pymode_options_colorcolumn = 0

" regenerate on write can drag vim to unusable state
let g:pymode_rope = 1
let g:pymode_rope_regenerate_on_write = 0
let g:pymode_rope_goto_definition_bind = '<C-]>'

" lint with pyflakes just like qa_python() shell func does
let g:pymode_lint = 1
let g:pymode_lint_checkers = ['pyflakes']
let g:pymode_lint_ignore = ['E501', 'E272', 'E221', 'E225', 'E303', 'W601', 'E302', 'E502', 'W291', 'E261', 'E262', 'W391', 'E127', 'E128', 'E126', 'E123', 'E125', 'E124', 'E711', 'E712', 'E121', 'E111', 'E265', 'E131', 'E226', 'E241', 'E701', 'D105']


""""""" altercation/vim-colors-solarized
" NOTES on PuTTY: for molokai or solarized to work under PuTTY, the following
" customizations are needed, otherwise many elements such as comments, line
" numbers, etc. will become invisible, possibly caused by them having the same
" color as the foreground color setting.
"
" 1. Apply dark or light color palette registry files.  It will add by default
"    either "Solarized Dark" or "Solarized Light" session.  Rename it in the
"    file content to change color settings for existing sessions
" 2. Window - Colours : Enable "Allow terminal to use xterm 256-colour mode"
" 3. Connection - Data - Terminal details : Terminal-type string: " "xterm-256color"
"
" NOTES on iTerm2: Set Solarized pallette by selecting it in Preferences,
" Profiles, Colors, Color Presets
"
" Degrade if changing terminal emulator's color pallette is not possible
"let g:solarized_termcolors=256
"syntax enable
"set background=light
"silent! colorscheme solarized
silent! colorscheme desert


""""""" ycm-core/YouCompleteMe
"
" Debug
"
"	:YcmDebugInfo	ycm and lang-servers' status
"	:YcmToggleLogs	ycm and lang-servers' log
"
"	let g:ycm_clangd_args = ['-log=verbose', '-pretty']
"
let g:ycm_confirm_extra_conf = 0	" Load .ycm_extra_conf.py?
let g:ycm_auto_trigger = 1		" Identifier completer, <C-Space> to force semance completer
let g:ycm_filetype_blacklist = {
	\ 'go': 1,
	\ 'python': 1,
	\ 'rust': 1
\ }

let g:ycm_clangd_uses_ycmd_caching = 0	" Suggested by clangd.llvm.org
"let g:ycm_clangd_binary_path = $HOME . '/.usr/toolchain/llvm-10.0.0/bin/clangd'
