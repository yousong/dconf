"VBundle
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
set nocompatible		"be iMproved, required
filetype off			"required
" set the runtime path to include Vundle and initialize
set rtp+=$HOME/.vim/bundle/Vundle.vim
call vundle#begin()			"call with a path vundle#begin('~/some/path/here')
Plugin 'gmarik/Vundle.vim'	"Github username/reponame
Plugin 'bling/vim-airline'
Plugin 'tpope/vim-fugitive' " Required by vim-airline for git repo.
Plugin 'terryma/vim-multiple-cursors'
"Plugin 'SirVer/ultisnips'	"The engine
"Plugin 'honza/vim-snippets'	"The snippets
"Plugin 'Shougo/neocomplete.vim'
Plugin 'mileszs/ack.vim'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/nerdcommenter'
Plugin 'tpope/vim-surround'
Plugin 'majutsushi/tagbar'
Plugin 'Align'				"Name of vim-script.org package mirrors.
Plugin 'tomasr/molokai'		"colorscheme
Plugin 'altercation/vim-colors-solarized'
Plugin 'kchmck/vim-coffee-script'	"languages
Plugin 'mattn/emmet-vim'
Plugin 'fatih/vim-go'
Plugin 'plasticboy/vim-markdown'
Plugin 'groenewege/vim-less'
Plugin 'alderz/smali-vim'
call vundle#end()
filetype plugin indent on		"required

" pathogen, ol' buddy
"call pathogen#infect()

""""""" bling/vim-airline
" disable tagbar integration (can be slow)
let g:airline#extensions#tagbar#enabled = 0
let g:airline#extensions#wordcount#enabled = 0
let g:airline#extensions#whitespace#enabled = 0
" disable fugitive integration (takes up space)
let g:airline#extensions#branch#enabled = 0
" show filename (no (compressed) path) in the tab
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'
" save tabline space
let g:airline#extensions#tabline#show_splits = 0
let g:airline#extensions#tabline#show_tab_type = 0
" no need to show "filetype<fileencoding[fileformat]"
let g:airline_section_x = ''
let g:airline_section_y = ''


""""""" mileszs/ack.vim
if executable('ag')
	let g:ackprg = 'ag --vimgrep'
endif


""""""" ctrlpvim/ctrlp.vim
" use project-specific .vimrc settings as a root marker.
"
" this will have the side effect that 'r' in g:ctrl_working_path_mode will
" succeed because of the presence of $HOME/.vimrc.  To workaround this
" situation, use CtrlPCurWD or CtrlPCurFile, or touch a dummy .vimrc at the
" desired root
let g:ctrlp_root_markers = ['.vimrc']
let g:ctrlp_user_command = {
	\ 'types': {
		\ 1: ['.git', 'cd %s && git ls-files -co --exclude-standard'],
		\ 2: ['.hg', 'hg --cwd %s locate -I .'],
		\ },
	\ 'fallback': 'find %s -type f'
	\ }


""""""" scrooloose/nerdtree
"   q to quit
nmap <C-N> :NERDTree %:p:h<CR>


""""""" terryma/vim-multiple-cursors
"   <C-N> for NERDTree
let g:multi_cursor_next_key='<C-M>'


""""""" ultisnips
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-f>"
let g:UltiSnipsJumpBackwardTrigger="<c-b>"
" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"


""""""" plasticboy/vim-markdown
let g:vim_markdown_folding_disabled = 1


""""""" majutsushi/tagbar
nmap <F8> :TagbarToggle<CR>

let g:tagbar_type_smali = {
        \ 'ctagstype' : 'smali',
        \ 'kinds' : [
                \ 'f:field',
                \ 'm:method',
        \ ]
\ }

" exuberant-ctags as of 5.8 does not support golang yet.  The following
" snippet requires installation of gotags, a ctags-compatible tag generator.
"
" 	go get -u github.com/jstemmer/gotags
"
" - https://github.com/jstemmer/gotags
" - https://github.com/majutsushi/tagbar/wiki#google-go
let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
\ }

""""""" fatih/vim-go
" Read vim-go-tutorial for more: https://github.com/fatih/vim-go-tutorial
"
" - Use ctrl-t to jump back
" - Use :GoDefStack to view and select the jump stack
augroup go_group
	autocmd!
	autocmd FileType go noremap <buffer> <leader>s :split<CR>:exec("GoDef ".expand("<cword>"))<CR>
	autocmd FileType go noremap <buffer> <leader>v :vsplit<CR>:exec("GoDef ".expand("<cword>"))<CR>
	autocmd FileType go noremap <buffer> <leader>t :tab split<CR>:exec("GoDef ".expand("<cword>"))<CR>
	autocmd FileType go nnoremap <buffer> <leader>. <Esc>:exec "GoDef " . expand("<cword>")<Esc>
	autocmd FileType go nested :TagbarOpen
augroup END
