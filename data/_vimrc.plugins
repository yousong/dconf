"VBundle
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
set nocompatible		"be iMproved, required
filetype off			"required
" set the runtime path to include Vundle and initialize
set rtp+=$HOME/.vim/bundle/Vundle.vim
call vundle#begin()			"call with a path vundle#begin('~/some/path/here')
Plugin 'gmarik/Vundle.vim'	"Github username/reponame
Plugin 'tpope/vim-fugitive'
Plugin 'mg979/vim-visual-multi'
"Plugin 'SirVer/ultisnips'	"The engine
"Plugin 'honza/vim-snippets'	"The snippets
Plugin 'mileszs/ack.vim'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/nerdcommenter'
Plugin 'tpope/vim-surround'
Plugin 'majutsushi/tagbar'
"Plugin 'godlygeek/tabular'
"Plugin 'Align'				"Name of vim-script.org package mirrors.
Plugin 'NLKNguyen/papercolor-theme'
Plugin 'ycm-core/YouCompleteMe'
"Plugin 'kchmck/vim-coffee-script'	" L: CoffeeScript
"Plugin 'mattn/emmet-vim'		" L: HTML
"Plugin 'groenewege/vim-less'		" L: LESS
"Plugin 'alderz/smali-vim'		" L: Smali
Plugin 'yuezk/vim-js'			" L: Javascript, Flow.js
Plugin 'MaxMEllon/vim-jsx-pretty'	" L: JSX, TSX
Plugin 'cespare/vim-toml'		" L: TOML
Plugin 'chr4/nginx.vim'			" L: NGINX
Plugin 'fatih/vim-go'			" L: Go
Plugin 'rust-lang/rust.vim'		" L: Rust, rustfmt
Plugin 'plasticboy/vim-markdown'	" L: Markdown
call vundle#end()
filetype plugin indent on		"required

" pathogen, ol' buddy
"call pathogen#infect()

""""""" mileszs/ack.vim
"
" Search results leak into terminal,
" https://github.com/mileszs/ack.vim/issues/18#issuecomment-303860665

if executable('rg')
	" https://blog.burntsushi.net/ripgrep/
	let g:ackprg = 'rg --vimgrep'
elseif executable('ag')
	let g:ackprg = 'ag --vimgrep'
endif
cnoreabbrev rg Ack


" let g:ack_mappings

""""""" ctrlpvim/ctrlp.vim
" use project-specific .vimrc settings as a root marker.  In the patched
" version, .vimrc has lower precedence over other markers like .git, .hg, etc.
" which means that when both .vimrc, .git are existent, .git will take effect
" and its corresponding custom command will succeed
let g:ctrlp_root_markers = ['.vimrc']

" when 'ignore' is set, output from command will subject to custom_ignore
" rules check
let g:ctrlp_user_command = {
	\ 'types': {
		\ 1: ['.git', 'cd %s && git ls-files -co --exclude-standard'],
		\ 2: ['.hg', 'hg --cwd %s locate -I .'],
		\ },
	\ 'fallback': 'find %s -type f',
	\ 'ignore': 1
	\ }
let g:ctrlp_custom_ignore = {
	\ 'dir':  '\v[\/]\.(git|hg|svn)$',
	\ 'file': '\v\.pyc$',
	\ }


""""""" scrooloose/nerdtree
"   q to quit
nmap <C-N> :NERDTree %:p:h<CR>
let NERDTreeIgnore = ['\.pyc$']
let NERDTreeMapOpenSplit = 's'
let NERDTreeMapOpenVSplit = 'v'
" https://github.com/preservim/nerdtree?tab=readme-ov-file#how-can-i-close-vim-or-a-tab-automatically-when-nerdtree-is-the-last-window
if v:version >= 900
	autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | call feedkeys(":quit\<CR>:\<BS>") | endif
	autocmd BufEnter * if winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | call feedkeys(":quit\<CR>:\<BS>") | endif
else
	autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif
	autocmd BufEnter * if winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif
endif


""""""" scrooloose/nerdcommenter
" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'
" Allow commenti ng and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1


""""""" mg979/vim-visual-multi
" - ':h vm-quick-reference'
" - doc/vm-mappings.txt
"
" - C-n is for NERDTree
" - C-Down, C-Up is reserved on macos
let g:VM_maps = {
	\ 'Find Under': '<C-m>',
	\ 'Find Subword Under': '<C-m>',
	\ 'Add Cursor Down': '<C-j>',
	\ 'Add Cursor Up': '<C-k>',
\ }


""""""" ultisnips
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-f>"
let g:UltiSnipsJumpBackwardTrigger="<c-b>"
" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"


""""""" plasticboy/vim-markdown
let g:vim_markdown_folding_disabled = 1


""""""" majutsushi/tagbar
let g:tagbar_sort = 0				" show symbols on order of presence
let g:tagbar_silent = 1				" no auto info about symbol after updatetime
let g:tagbar_compact = 1			" no help info at the above
let g:tagbar_singleclick = 1		" jump on singleclick
nmap <F8> :TagbarToggle<CR>
augroup tagbar_group
	autocmd!
	autocmd FileType * :call tagbar#autoopen()
augroup END

" rst2ctags.py was taken from https://github.com/jszakmeister/rst2ctags
let g:tagbar_type_rst = {
	\ 'ctagstype': 'rst',
	\ 'ctagsbin' : $HOME . '/.usr.env/bin/rst2ctags.py',
	\ 'ctagsargs' : '-f - --sort=yes',
	\ 'kinds' : [
		\ 's:sections',
		\ 'i:images'
	\ ],
	\ 'sro' : '|',
	\ 'kind2scope' : {
		\ 's' : 'section',
	\ },
	\ 'sort': 0,
\ }

let g:tagbar_type_markdown = {
	\ 'ctagstype': 'markdown',
	\ 'ctagsbin' : $HOME . '/.usr.env/bin/markdown2ctags.py',
	\ 'ctagsargs' : '-f - --sort=yes',
	\ 'kinds' : [
		\ 's:sections',
		\ 'i:images'
	\ ],
	\ 'sro' : '|',
	\ 'kind2scope' : {
		\ 's' : 'section',
	\ },
	\ 'sort': 0,
\ }

let g:tagbar_type_smali = {
        \ 'ctagstype' : 'smali',
        \ 'kinds' : [
                \ 'f:field',
                \ 'm:method',
        \ ]
\ }

let g:tagbar_type_gdb = {
        \ 'ctagstype' : 'gdb',
        \ 'kinds' : [
                \ 'c:command',
        \ ]
\ }


""""""" fatih/vim-go
" Read vim-go-tutorial for more: https://github.com/fatih/vim-go-tutorial
"
" A sample .vimrc conf from fatih:
" https://github.com/fatih/vim-go-tutorial/blob/master/vimrc
"
" - Use ctrl-t to jump back
" - Use :GoDefStack to view and select the jump stack
"
" Settings, https://github.com/golang/tools/blob/master/gopls/doc/settings.md
"
"let g:go_gopls_deep_completion = v:false
"let g:go_gopls_complete_unimported = v:false
"let g:go_gopls_staticcheck = v:false
"let g:go_gopls_options = [
"	\ '-logfile', 'auto',
"	\ '-vv',
"\ ]
"let g:go_debug=['lsp']

augroup go_group
	autocmd!
	autocmd FileType go
		\ nnoremap <buffer> <leader>s     :split<CR>:exec("GoDef ".expand("<cword>"))<CR> |
		\ nnoremap <buffer> <leader>v    :vsplit<CR>:exec("GoDef ".expand("<cword>"))<CR> |
		\ nnoremap <buffer> <leader>t :tab split<CR>:exec("GoDef ".expand("<cword>"))<CR> |
		\ nnoremap <buffer> <leader>.          <Esc>:exec("GoDef ".expand("<cword>"))<Esc> |
		\ nnoremap <buffer> <leader>e :GoBuildTags ''<CR> |
augroup END

augroup go_group_mod_vendor
	autocmd FileType go call GoCheckModVendor()
augroup END

"" Search from the directory where current file is, up to the $HOME directory
"" or / (root) directory until a vendor/ directory is found
function! GoCheckModVendor()
	autocmd! go_group_mod_vendor

	let l:d = fnamemodify(expand('%:p'), ':h')

	" only when l:d is a directory under $GOPATH
	let l:l = strlen($GOPATH)
	if l:l > 0
		if stridx(l:d, $GOPATH) != 0 | return | endif
		if strlen(l:d) > l:l && l:d[l:l] != '/' | return | endif
	endif

	" There are times the expand result is just a dot...
	if l:d[0] != '/' | return | endif

	while 1
		if l:d == $HOME                 | return | endif
		if isdirectory(l:d . '/vendor')
			let $GO111MODULE = "off"
			return
		endif
		if isdirectory(l:d . '/.git')   | return | endif
		if l:d == '/'                   | return | endif
		let l:d = fnamemodify(l:d, ':h')
	endwhile
endfunction


""""""" rust-lang/rust
let g:rustfmt_autosave = 1


""""""" ycm-core/YouCompleteMe
"
" Debug
"
"	:YcmDebugInfo		ycm and lang-servers' status
"	:YcmToggleLogs		ycm and lang-servers' log
"	:YcmRestartServer	restart ycmd
"
"	let g:ycm_clangd_args = ['-log=verbose', '-pretty']
"
" ycmd will use inotify to watch directories and consume a lot of watch
" descriptor quota.  If commands fail because of this, increase sysctl setting
"
"	sysctl fs.inotify.max_user_instances=1280
"	sysctl fs.inotify.max_user_watches=81920
"
"let g:ycm_global_ycm_extra_conf = $HOME . '/.vim/bundle/YouCompleteMe/dconf.global_extra_conf.py'
let g:ycm_confirm_extra_conf = 0	" Load .ycm_extra_conf.py?
let g:ycm_auto_trigger = 1		" Identifier completer, <C-Space> to force semance completer
let g:ycm_enable_diagnostic_highlighting = 0
" https://ycm-core.github.io/YouCompleteMe/#semantic-completion-for-other-languages
" https://github.com/ycm-core/lsp-examples
" language servers, https://microsoft.github.io/language-server-protocol/implementors/servers/
" serve-d, https://github.com/Pure-D/serve-d/blob/master/editor-vim.md
" ccls, https://github.com/MaskRay/ccls/wiki/YouCompleteMe
let g:ycm_lsp_dir = $HOME . '/.vim/bundle/YouCompleteMe/lsp-server'
let g:ycm_language_server = [
    \ {
    \     'name': 'd',
    \     'cmdline': [g:ycm_lsp_dir . '/d/serve-d'],
    \     'filetypes': ['d'],
    \ },
\ ]
let g:ycm_filetype_blacklist = {
	\ 'go': 1,
	\ 'tagbar': 1,
	\ 'nerdtree': 1,
\ }

"" C
"
" Generate compilation database
"
"	pip3 install compiledb
"	compiledb make ARCH=mips CROSS_COMPILE=mips-openwrt-linux-musl- -j6
"
" The kernel has scripts/clang-tools/gen_compile_commands.py
"
"	make compile_commands.json
"
" Ignore gcc args unknown to clang
"
"	args='
"		-maccumulate-outgoing-args
"		-mindirect-branch=thunk-extern
"		-mno-fp-ret-in-387
"		-mpreferred-stack-boundary=3
"		-mindirect-branch-register
"		-fno-var-tracking-assignments
"		-fconserve-stack
"		-Wno-unused-but-set-variable
"	'
"
"	for arg in $args; do
"	  sed -i -e "/$arg/d" compile_commands.json
"	done
"
" There is also compile_flags.txt for simple projects.  Each argument is on
" its line.
"
" - https://clang.llvm.org/docs/JSONCompilationDatabase.html
"
"
let g:ycm_clangd_uses_ycmd_caching = 0	" Suggested by clangd.llvm.org
"let g:ycm_clangd_binary_path = $HOME . '/.usr/toolchain/llvm-10.0.0/bin/clangd'
let g:ycm_auto_hover = ''
augroup ycm_group
	autocmd!
	autocmd FileType c,cpp,cuda,d,javascript,python,rust,typescript
		\ nnoremap <buffer> K :exec("YcmCompleter GetDoc")<CR>|
		\ nnoremap <buffer> <leader>s :split<CR>:exec("YcmCompleter GoTo")<CR>|
		\ nnoremap <buffer> <leader>v :vsplit<CR>:exec("YcmCompleter GoTo")<CR>|
		\ nnoremap <buffer> <leader>t :tab split<CR>:exec("YcmCompleter GoTo")<CR>|
		\ nnoremap <buffer> <leader>. <Esc>:exec("YcmCompleter GoTo")<Esc>|
		\ nnoremap <buffer> <leader>e :YcmRestartServer<CR>|
		\ nmap <buffer> <leader>, <plug>(YCMHover)|
augroup END

function! YcmCAutoFormat()
	autocmd BufWritePre *.c,*.cpp,*.h,*.hpp,*.rs YcmCompleter Format
endfunction

"" Go
"augroup go_group
"	autocmd!
"	autocmd FileType go
"		\ nnoremap <buffer> K :exec("YcmCompleter GetDoc ".expand("<cword>"))<CR> |
"		\ nnoremap <buffer> <leader>s :split<CR>:exec("YcmCompleter GoTo ".expand("<cword>"))<CR> |
"		\ nnoremap <buffer> <leader>v :vsplit<CR>:exec("YcmCompleter GoTo ".expand("<cword>"))<CR> |
"		\ nnoremap <buffer> <leader>t :tab split<CR>:exec("YcmCompleter GoTo ".expand("<cword>"))<CR> |
"		\ nnoremap <buffer> <leader>. <Esc>:exec "YcmCompleter GoTo " . expand("<cword>")<Esc> |
"		\ autocmd BufWritePre *.go YcmCompleter Format
"
"augroup END


""""""" colorscheme
" NOTES on PuTTY: for molokai or solarized to work under PuTTY, the following
" customizations are needed, otherwise many elements such as comments, line
" numbers, etc. will become invisible, possibly caused by them having the same
" color as the foreground color setting.
"
" 1. Apply dark or light color palette registry files.  It will add by default
"    either "Solarized Dark" or "Solarized Light" session.  Rename it in the
"    file content to change color settings for existing sessions
" 2. Window - Colours : Enable "Allow terminal to use xterm 256-colour mode"
" 3. Connection - Data - Terminal details : Terminal-type string: " "xterm-256color"
"
" NOTES on iTerm2: Set Solarized pallette by selecting it in Preferences,
" Profiles, Colors, Color Presets
"
" NOTES on tmux: start tmux with "-2" argument to force 256color tty feature
silent! colorscheme PaperColor
