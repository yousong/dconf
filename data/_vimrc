"VBundle
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
set nocompatible			"be iMproved, required
filetype on				"required
filetype off				"required
set rtp+=$HOME/.vim/bundle/Vundle.vim	" set the runtime path to include Vundle and initialize
call vundle#begin()			"call with a path vundle#begin('~/some/path/here')
Plugin 'gmarik/Vundle.vim'	"Github username/reponame
Plugin 'bling/vim-airline'
Plugin 'tpope/vim-fugitive' " Required by vim-airline for git repo.
Plugin 'terryma/vim-multiple-cursors'
Plugin 'SirVer/ultisnips'	"The engine
Plugin 'honza/vim-snippets'	"The snippets
Plugin 'mileszs/ack.vim'
Plugin 'Shougo/neocomplete.vim'
Plugin 'kien/ctrlp.vim'
Plugin 'mattn/emmet-vim'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/nerdcommenter'
Plugin 'tpope/vim-surround'
Plugin 'majutsushi/tagbar'
Plugin 'kchmck/vim-coffee-script'
Plugin 'fatih/vim-go'
Plugin 'plasticboy/vim-markdown'
Plugin 'groenewege/vim-less'
Plugin 'Align'				"Name of vim-script.org package mirrors.
Plugin 'fatih/molokai'			"colorscheme
call vundle#end()
filetype plugin indent on		"required

" pathogen, ol' buddy
"call pathogen#infect()

" MacPorts install on Mac OSX
if isdirectory("/opt/local/share/vim/vimfiles/")
	set runtimepath+=/opt/local/share/vim/vimfiles/
endif
source $VIMRUNTIME/vimrc_example.vim

syntax enable

"source $VIMRUNTIME/mswin.vim
"behave mswin

let g:backupdir = $HOME."/.vim.tmp.d"
if !isdirectory(g:backupdir)
	call mkdir(g:backupdir, 'p')
endif
let &backupdir=g:backupdir

" http://superuser.com/questions/549930/cant-resize-vim-splits-inside-tmux
set mouse=a
if &term =~ '^screen'
	" we are within tmux/screen, they know the extended mouse mode
    set ttymouse=xterm2
endif

set undodir=$HOME/.vim.tmp.d
set noswapfile

" Disable the autoformatting when pasting content from clipboard.
"	set paste disable all of key mappings. So you can't use any vim plugins which provide key mappings.
"	https://github.com/mattn/emmet-vim/issues/148#issuecomment-38451345
" set paste				"Put Vim in Paste mode.
"
set cindent			"Enables automatic C program indenting.  See also cinkeys, cinoptions

set softtabstop=4		"Number of spaces that a <Tab> counts for while performing editing operations, like inserting a <Tab> or using <BS>.
set shiftwidth=4		"Number of spaces to use for each step of (auto)indent.  Used for |'cindent'|, |>>|, |<<|, etc.
set tabstop=4			"Number of spaces that a <Tab> in the file counts for.
set noexpandtab			" Openwrt and Linux kernel do not like space-expanded indentation...

set tabpagemax=31
set number
set autochdir
set autoread

set fileformat=unix
set fileencodings+=utf-8
"au BufNewFile * :set fileencoding=utf-8

let mapleader=","

" mileszs/ack.vim
let g:ackprg = 'ag --nogroup --nocolor --column'

" scrooloose/nerdtree
"   q to quit
nmap <C-N> :NERDTree<CR>

" terryma/vim-multiple-cursors
"   <C-N> for NERDTree
let g:multi_cursor_next_key='<C-M>'
" Compatibility with neocomplete, https://github.com/terryma/vim-multiple-cursors#multiple_cursors_beforemultiple_cursors_after-default-nothing
function! Multiple_cursors_before()
  if exists(':NeoCompleteLock')==2
    exe 'NeoCompleteLock'
  endif
endfunction
function! Multiple_cursors_after()
  if exists(':NeoCompleteUnlock')==2
    exe 'NeoCompleteUnlock'
  endif
endfunction

" ultisnips
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-f>"
let g:UltiSnipsJumpBackwardTrigger="<c-b>"
" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

" neocomplete
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#sources#syntax#min_keyword_length = 3
" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Valloric/YouCompleteMe
"let g:ycm_server_use_vim_stdout = 1
"let g:ycm_server_log_level = 'debug'
"let g:ycm_confirm_extra_conf = 0

" majutsushi/tagbar
nmap <F8> :TagbarToggle<CR>

" Style
let g:molokai_original = 1
let g:vim_markdown_folding_disabled = 1
silent! colorscheme molokai
if has("gui_running")
else
    set t_Co=256
endif
" http://stackoverflow.com/questions/8247243/highlighting-the-current-line-number-in-vim
"  - Clear highlighting after any :colorscheme and set background= call
"  - Enable cursorline
highlight clear CursorLine
set cursorline

" Taglist http://vim.sourceforge.net/scripts/script.php?script_id=273
"let Tlist_Ctags_Cmd=$HOME . '/opt/local/bin/ctags'

" To let netrw be silent when opening a new window
let g:netrw_silent=1

" setfiletype
augroup filetypedetect
	au! VimEnter,BufRead,BufNewFile *.nc setfiletype nc
	au! VimEnter,BufRead,BufNewFile *.as setfiletype actionscript
	au! VimEnter,BufRead,BufNewFile *.go setfiletype go
	au! VimEnter,BufRead,BufNewFile *.coffeeb setfiletype coffee
augroup END

augroup go_group
	let g:tagbar_type_go = {
		\ 'ctagstype' : 'go',
		\ 'kinds'     : [
		\ 'p:package',
		\ 'i:imports:1',
		\ 'c:constants',
		\ 'v:variables',
		\ 't:types',
		\ 'n:interfaces',
		\ 'w:fields',
		\ 'e:embedded',
		\ 'm:methods',
		\ 'r:constructor',
		\ 'f:functions'
		\ ],
		\ 'sro' : '.',
		\ 'kind2scope' : {
		\ 't' : 'ctype',
		\ 'n' : 'ntype'
		\ },
		\ 'scope2kind' : {
		\ 'ctype' : 't',
		\ 'ntype' : 'n'
		\ },
		\ 'ctagsbin'  : 'gotags',
		\ 'ctagsargs' : '-sort -silent'
		\ }
augroup END

" TeX editing
augroup tex_group
	autocmd!
	au BufNewFile,BufRead *.tex set textwidth=67
	au BufNewFile,BufRead *.tex set formatoptions+=mM
	au BufNewFile,BufRead *.tex let g:tex_ignore_makefile=1
	au BufNewFile,BufRead *.tex let g:tex_flavor="xetex"
	au BufNewFile,BufRead *.tex compiler tex
	" Open the produced PDF file
	au BufNewFile,BufRead *.tex map <C-P> :silent exec("!" . expand("%:r") . ".pdf")<CR>
	au BufNewFile,BufRead *.tex set tabstop=2
	au BufNewFile,BufRead *.tex set softtabstop=2
	au BufNewFile,BufRead *.tex set shiftwidth=2
	au BufNewFile,BufRead *.tex set expandtab
augroup END

augroup python_group
	autocmd!
	autocmd FileType python set expandtab
	autocmd FileType python set autoindent
	autocmd FileType python set tabstop=4
	autocmd FileType python set shiftwidth=4
	autocmd FileType python set softtabstop=4
	autocmd FileType python set modeline
	autocmd FileType python set smartindent
	autocmd FileType python set cursorcolumn
	"autocmd FileType python set cinwords=if,elif,else,for,while,try,except,finally,def,class
	"autocmd FileType python imap :<CR> :<CR><TAB>
augroup END

augroup make_group
	autocmd!
	autocmd FileType make set noexpandtab
	autocmd FileType make set shiftwidth=8
	autocmd FileType make set tabstop=8
	autocmd FileType make set softtabstop=8
augroup END

augroup markdown_group
	autocmd!
	autocmd FileType mkd set noexpandtab
	autocmd FileType mkd set tabstop=4 shiftwidth=4 softtabstop=4
	autocmd FileType mkd inoremap ` ``<Left>
augroup END

augroup c_group
	autocmd!
	autocmd FileType c set noexpandtab
	autocmd FileType c set tabstop=8 shiftwidth=8 softtabstop=8
augroup END

augroup coffee_group
augroup END

augroup text_group
	autocmd!
	autocmd FileType text set copyindent			"Copy the structure of the existing lines indent when autoindenting a new line.
augroup END


"http://vim.wikia.com/wiki/Search_for_visually_selected_text
" Search for selected text, forwards or backwards.
vnoremap <silent> * :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy/<C-R><C-R>=substitute(
  \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>
vnoremap <silent> # :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy?<C-R><C-R>=substitute(
  \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>

""" Key mappings

"expand `\(' to `\(\)'
cnoremap \( \(\)<Left><Left>
"[tag]show word under cursor in a vertically
"splitted window or in a new tab
noremap <M-[> :vsplit<CR>:exec("tag ".expand("<cword>"))<CR>
noremap <M-]> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>

" from mswin.vim for copy and paste
vnoremap <C-C>	"+y
noremap <C-V>	"+gP

" for tab navigation
nmap <C-H> :tabprevious<CR>
nmap <C-L> :tabnext<CR>

"let b:tex_flavor = 'xetex'
"compiler tex
"set makeprg=xetex\ %
"set errorformat=%f:%l:\ %m

" statusline: colorscheme resets all existing highlight definitions.
" http://stackoverflow.com/questions/5375240/a-more-useful-statusline-in-vim
set laststatus=2		" always status line
