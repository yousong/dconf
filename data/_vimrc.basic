" MacPorts install on Mac OSX
if isdirectory("/opt/local/share/vim/vimfiles")
	set runtimepath+=/opt/local/share/vim/vimfiles
endif
source $VIMRUNTIME/vimrc_example.vim

syntax enable

"source $VIMRUNTIME/mswin.vim
"behave mswin


" This directory can be big after years of editing.  Keep the most recent 50
"
"	for f in `ls -t $HOME/.vim.tmp.d | tail -n +50`; do
"	  rm -vf "$HOME/.vim.tmp.d/$f";
"	done
let g:backupdir = $HOME . "/.vim.tmp.d"
if !isdirectory(g:backupdir)
	call mkdir(g:backupdir, 'p')
endif
let &backupdir=g:backupdir
let &undodir=g:backupdir
set noswapfile
set maxmempattern=2048	" maximum 2048KB for pattern matching


if has("gui_running")
	" Change font, http://vim.wikia.com/wiki/Change_font
	"   set guifont=* to select one
    set guifont=Menlo\ Regular:h14
else
    set t_Co=256
	set background=dark
	let g:molokai_original = 1
	let g:solarized_termcolors=256
endif
" - http://superuser.com/questions/549930/cant-resize-vim-splits-inside-tmux
" - http://stackoverflow.com/questions/7000960/in-vim-why-doesnt-my-mouse-work-past-the-220th-column
" - Re: [dev] st mouse support beyond column 223, (good background info, 223 = 255 - 32), http://lists.suckless.org/dev/1301/14351.html
" - mouse_sgr support for Vim, ftp://ftp.vim.org/pub/vim/patches/7.3/7.3.632
" - GNU screen and FAU screen does not support sgr mouse reporting yet.
"   - Patch is available, https://gist.github.com/saitoha/3097729
"   - Build method, http://stackoverflow.com/questions/24700444/gnu-screen-mouse-limitation
set mouse=a
if has("mouse_sgr")
	set ttymouse=sgr
else
	"if &term =~ '^screen'
	" we are within tmux/screen, they know the extended mouse mode
	"endif
	set ttymouse=xterm2
end
set ttyfast                     " Indicate fast terminal conn for faster redraw
set ttyscroll=3                 " Speedup scrolling
set nocursorcolumn              " Do not highlight column (speeds up highlighting)
set nocursorline                " Do not highlight cursor (speeds up highlighting)
set lazyredraw                  " Wait to redraw


" turn off for performance
function! TurnOffParenMatch()
	set noshowmatch
	if exists(':NoMatchParen')
		:NoMatchParen
	endif
endfunction
autocmd VimEnter * call TurnOffParenMatch()


" autoindent, Copy indent from current line when starting a new line.  Affect
" 'gq' command
"
" copyindent, Copy the characters for indent when autoindenting, without
" regard for expandtab, a \t remains a \t
"
" cindent, Enables automatic C-line program indenting.  See also cinkeys,
" cinoptions
"
" smartindent, also for other languages;  has no effect when cindent is on or
" indentexpr is set
"
" formatoptions, no effect when paste is set
"
"   c	auto-wrap comments using textwidth
"   r	auto-insert current comment leader after hitting 'o' or 'O' in N-mode
"   o	auto-insert current comment leader after hitting <Enter> in I-mode
"   m	also break at a multi-byte character above 255 for asian text
"   M	no insertion of spaces when joining lines
"
" paste, when enabled, a lot of things get reset/disabled.  Disable it and
" retry if things do not work as expected
set formatoptions+=cro

" tabstop, number of spaces a \t character counts for
"
" softtabstop, number of spaces a tab counts for while performing editing
" operations.  Uses \t and \x20 to fill to fulfil the feel.  disabled when
" set to 0 (default)
"
" shiftwidth, used for cindent, <<, >>, etc.  use tabstop when 0
"
" expandtab, in insert mode, use tabstop spaces to replace \t
set tabstop=8
set softtabstop=0
set shiftwidth=0
set noexpandtab

set tabpagemax=31
set number
set autoread

set encoding=utf-8              " Set default encoding to UTF-8
set fileformat=unix
set fileencodings+=utf-8


" http://vimdoc.sourceforge.net/htmldoc/insert.html#ins-completion
"
" - C-N, C-P, keywords in complete option
" - C-X
"  - C-F, filename
"  - C-O, omni
"  - C-], tags
"  - C-N, keywords in current file
"
set wildmenu
set complete=.,b,w,t,i	" exclude unloaded buffers from the default
set completeopt=menu,preview,longest
						" insert only the longest matched part


" NOTES on PuTTY: for molokai or solarized to work under PuTTY, the following
" customizations are needed, otherwise many elements such as comments, line
" numbers, etc. will become invisible, possibly caused by them having the same
" color as the foreground color setting.
"
" 1. Apply dark or light color palette registry files.  It will add by default
"    either "Solarized Dark" or "Solarized Light" session.  Rename it in the
"    file content to change color settings for existing sessions
" 2. Window - Colours : Enable "Allow terminal to use xterm 256-colour mode"
" 3. Connection - Data - Terminal details : Terminal-type string: " "xterm-256color"
"
" - http://blog.cochard.me/2014/09/putty-and-solarized-colors.html
"
"silent! colorscheme molokai
silent! colorscheme solarized


" To let netrw be silent when opening a new window
let g:netrw_silent=1
let mapleader=","

" setfiletype
augroup filetypedetect
	au! BufReadPre,BufNewFile *.nc setfiletype nc
	au! BufReadPre,BufNewFile *.as setfiletype actionscript
	au! BufReadPre,BufNewFile *.coffeeb setfiletype coffee
	au! BufReadPre,BufNewFile * setlocal bufhidden=wipe
augroup END

" TeX editing
augroup tex_group
	autocmd!
	au FileType plaintex set
				\ tabstop=2
				\ expandtab
				\ textwidth=67
				\ formatoptions+=mM
	au FileType plaintex let g:tex_ignore_makefile=1
	au FileType plaintex let g:tex_flavor="xetex"
	au FileType plaintex compiler tex
	au FileType plaintex map <C-P> :silent exec("!" . expand("%:r") . ".pdf")<CR> " Open the produced PDF file
augroup END

augroup python_group
	autocmd!
	autocmd FileType python set
				\ tabstop=4
				\ expandtab
augroup END

augroup markdown_group
	autocmd!
	autocmd FileType markdown set tabstop=4
	autocmd FileType markdown inoremap ` ``<Left>
augroup END


"http://vim.wikia.com/wiki/Search_for_visually_selected_text
" Search for selected text, forwards or backwards.
vnoremap <silent> * :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy/<C-R><C-R>=substitute(
  \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>
vnoremap <silent> # :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy?<C-R><C-R>=substitute(
  \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>

"expand `\(' to `\(\)'
cnoremap \( \(\)<Left><Left>

" search until $HOME
set tags=tags;$HOME
" - tag show in vertically-splitted window or newly-created tab
" - tag show in preview window
noremap <leader>s :split<CR>:exec("tag ".expand("<cword>"))<CR>
noremap <leader>v :vsplit<CR>:exec("tag ".expand("<cword>"))<CR>
noremap <leader>t :tab split<CR>:exec("tag ".expand("<cword>"))<CR>
nnoremap <leader>. <Esc>:exec "ptjump " . expand("<cword>")<Esc>

" from mswin.vim for copy and paste
vnoremap <C-C>	"+y
noremap <C-V>	"+gP

" for tab navigation
nmap <C-H> :tabprevious<CR>
nmap <C-L> :tabnext<CR>

"let b:tex_flavor = 'xetex'
"compiler tex
"set makeprg=xetex\ %
"set errorformat=%f:%l:\ %m

" statusline: colorscheme resets all existing highlight definitions.
" http://stackoverflow.com/questions/5375240/a-more-useful-statusline-in-vim
set laststatus=2		" always status line

function! DoProfile()
	let l:log = expand("$HOME") . "/.vim.tmp.d/profile.log"
	" use execute because :profile command expects a "raw" filename and will
	" not dereference the provided variable
	execute 'profile start ' . l:log
	profile func *
	profile file *
	echomsg " - Pause profiling with :profile pause"
	echomsg " - View result with :edit " . l:log
endfunction

if ! exists("*DoFindSourceLocalVimrc")
	function! DoFindSourceLocalVimrc()
		"" Search from the directory where current file is, up to the $HOME directory
		"" or / (root) directory until a .vimrc is found, then source that file
		let l:d = fnamemodify(expand('%:p'), ':h')
		if l:d[0] != '/'
			" There are times the expand result is just a dot...
			return 0
		endif
		let l:h = expand('$HOME')
		while 1
			if l:d == l:h
				return 0
			endif
			let l:f = l:d . '/.vimrc'
			if filereadable(l:f)
				execute 'source ' . l:f
				return 1
			endif
			if l:d == '/'
				return 0
			else
				let l:d = fnamemodify(l:d, ':h')
			endif
		endwhile
	endfunction
	" not quite sure if it's secure
	set secure
	" Directory specific .vimrc
	call DoFindSourceLocalVimrc()
endif
