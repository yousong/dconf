" MacPorts install on Mac OSX
if isdirectory("/opt/local/share/vim/vimfiles/")
	set runtimepath+=/opt/local/share/vim/vimfiles/
endif
source $VIMRUNTIME/vimrc_example.vim

syntax enable

"source $VIMRUNTIME/mswin.vim
"behave mswin

let g:backupdir = $HOME."/.vim.tmp.d"
if !isdirectory(g:backupdir)
	call mkdir(g:backupdir, 'p')
endif
let &backupdir=g:backupdir

" - http://superuser.com/questions/549930/cant-resize-vim-splits-inside-tmux
" - http://stackoverflow.com/questions/7000960/in-vim-why-doesnt-my-mouse-work-past-the-220th-column
" - Re: [dev] st mouse support beyond column 223, (good background info, 223 = 255 - 32), http://lists.suckless.org/dev/1301/14351.html
" - mouse_sgr support for Vim, ftp://ftp.vim.org/pub/vim/patches/7.3/7.3.632
" - GNU screen and FAU screen does not support sgr mouse reporting yet.
"   - Patch is available, https://gist.github.com/saitoha/3097729
"   - Build method, http://stackoverflow.com/questions/24700444/gnu-screen-mouse-limitation
set mouse=a
if has("mouse_sgr")
	set ttymouse=sgr
else
	"if &term =~ '^screen'
	" we are within tmux/screen, they know the extended mouse mode
	"endif
	set ttymouse=xterm2
end
set wildmenu

" this directory can be big after years of editing.
"
" Keep the most recent 50
"
"	for f in `ls -t $HOME/.vim.tmp.d | tail -n +50`; do
"	  rm -vf "$HOME/.vim.tmp.d/$f";
"	done
"
set undodir=$HOME/.vim.tmp.d
set noswapfile

" Disable the autoformatting when pasting content from clipboard.
"	set paste disable all of key mappings. So you can't use any vim plugins which provide key mappings.
"	https://github.com/mattn/emmet-vim/issues/148#issuecomment-38451345
" set paste				"Put Vim in Paste mode.
"
set cindent				"Enables automatic C program indenting.  See also cinkeys, cinoptions
set formatoptions+=cro	"wrap comments using textwidth and insert current comment leader on <Enter>, 'o', or 'O'

set softtabstop=4		"Number of spaces that a <Tab> counts for while performing editing operations, like inserting a <Tab> or using <BS>.
set shiftwidth=4		"Number of spaces to use for each step of (auto)indent.  Used for |'cindent'|, |>>|, |<<|, etc.
set tabstop=4			"Number of spaces that a <Tab> in the file counts for.
set noexpandtab			" Openwrt and Linux kernel do not like space-expanded indentation...

set tabpagemax=31
set number
set autochdir
set autoread

set fileformat=unix
set fileencodings+=utf-8
"au BufNewFile * :set fileencoding=utf-8

let mapleader=","

if has("gui_running")
	" Change font, http://vim.wikia.com/wiki/Change_font
	"   set guifont=* to select one
    set guifont=Menlo\ Regular:h14
else
    set t_Co=256
	set background=dark
	let g:molokai_original = 1
	let g:solarized_termcolors=256
endif

" NOTES on PuTTY: for molokai or solarized to work under PuTTY, the following
" customizations are needed, otherwise many elements such as comments, line
" numbers, etc. will become invisible, possibly caused by them having the same
" color as the foreground color setting.
"
" 1. Apply dark or light color palette registry files.  It will add by default
"    either "Solarized Dark" or "Solarized Light" session.  Rename it in the
"    file content to change color settings for existing sessions
" 2. Window - Colours : Enable "Allow terminal to use xterm 256-colour mode"
" 3. Connection - Data - Terminal details : Terminal-type string: " "xterm-256color"
"
" - http://blog.cochard.me/2014/09/putty-and-solarized-colors.html
"
"silent! colorscheme molokai
silent! colorscheme solarized


" http://stackoverflow.com/questions/8247243/highlighting-the-current-line-number-in-vim
"  - Clear highlighting after any :colorscheme and set background= call
"  - Enable cursorline
highlight clear CursorLine
set cursorline

" To let netrw be silent when opening a new window
let g:netrw_silent=1

" setfiletype
augroup filetypedetect
	au! VimEnter,BufRead,BufNewFile *.nc setfiletype nc
	au! VimEnter,BufRead,BufNewFile *.as setfiletype actionscript
	au! VimEnter,BufRead,BufNewFile *.go setfiletype go
	au! VimEnter,BufRead,BufNewFile *.coffeeb setfiletype coffee
augroup END

" TeX editing
augroup tex_group
	autocmd!
	au BufNewFile,BufRead *.tex set textwidth=67
	au BufNewFile,BufRead *.tex set formatoptions+=mM
	au BufNewFile,BufRead *.tex let g:tex_ignore_makefile=1
	au BufNewFile,BufRead *.tex let g:tex_flavor="xetex"
	au BufNewFile,BufRead *.tex compiler tex
	" Open the produced PDF file
	au BufNewFile,BufRead *.tex map <C-P> :silent exec("!" . expand("%:r") . ".pdf")<CR>
	au BufNewFile,BufRead *.tex set tabstop=2
	au BufNewFile,BufRead *.tex set softtabstop=2
	au BufNewFile,BufRead *.tex set shiftwidth=2
	au BufNewFile,BufRead *.tex set expandtab
augroup END

augroup python_group
	autocmd!
	autocmd FileType python set expandtab
	autocmd FileType python set autoindent
	autocmd FileType python set tabstop=4
	autocmd FileType python set shiftwidth=4
	autocmd FileType python set softtabstop=4
	autocmd FileType python set modeline
	autocmd FileType python set smartindent
	autocmd FileType python set cursorcolumn
	"autocmd FileType python set cinwords=if,elif,else,for,while,try,except,finally,def,class
	"autocmd FileType python imap :<CR> :<CR><TAB>
augroup END

augroup make_group
	autocmd!
	autocmd FileType make set noexpandtab
	autocmd FileType make set shiftwidth=8
	autocmd FileType make set tabstop=8
	autocmd FileType make set softtabstop=8
augroup END

augroup markdown_group
	autocmd!
	autocmd FileType mkd set noexpandtab
	autocmd FileType mkd set tabstop=4 shiftwidth=4 softtabstop=4
	autocmd FileType mkd inoremap ` ``<Left>
augroup END

augroup text_group
	autocmd!
	autocmd FileType text set copyindent			"Copy the structure of the existing lines indent when autoindenting a new line.
augroup END


"http://vim.wikia.com/wiki/Search_for_visually_selected_text
" Search for selected text, forwards or backwards.
vnoremap <silent> * :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy/<C-R><C-R>=substitute(
  \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>
vnoremap <silent> # :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy?<C-R><C-R>=substitute(
  \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>

""" Key mappings

"expand `\(' to `\(\)'
cnoremap \( \(\)<Left><Left>

" search until $HOME
set tags=tags;$HOME
" - tag show in vertically-splitted window or newly-created tab
" - tag show in preview window
noremap <M-[> :vsplit<CR>:exec("tag ".expand("<cword>"))<CR>
noremap <M-]> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>
nnoremap <leader>. <Esc>:exec "ptjump " . expand("<cword>")<Esc>


" from mswin.vim for copy and paste
vnoremap <C-C>	"+y
noremap <C-V>	"+gP

" for tab navigation
nmap <C-H> :tabprevious<CR>
nmap <C-L> :tabnext<CR>

"let b:tex_flavor = 'xetex'
"compiler tex
"set makeprg=xetex\ %
"set errorformat=%f:%l:\ %m

" statusline: colorscheme resets all existing highlight definitions.
" http://stackoverflow.com/questions/5375240/a-more-useful-statusline-in-vim
set laststatus=2		" always status line

function! DoFindSourceLocalVimrc()
	"" Search from the directory where current file is, up to the $HOME directory
	"" or / (root) directory until a .vimrc is found, then source that file
	let l:d = fnamemodify(expand('%:p'), ':h')
	if l:d[0] != '/'
		" There are times the expand result is just a dot...
		return 0
	endif
	let l:h = expand('$HOME')
	while 1
		if l:d == l:h
			return 0
		endif
		let l:f = l:d . '/.vimrc'
		if filereadable(l:f)
			execute 'source ' . l:f
			return 1
		endif
		if l:d == '/'
			return 0
		else
			let l:d = fnamemodify(l:d, ':h')
		endif
	endwhile
endfunction

function! DoProfile()
	let l:log = expand("$HOME") . "/.vim.tmp.d/profile.log"
	" use execute because :profile command expects a "raw" filename and will
	" not dereference the provided variable
	execute 'profile start ' . l:log
	profile func *
	profile file *
	echomsg " - Pause profiling with :profile pause"
	echomsg " - View result with :edit " . l:log
endfunction

" not quite sure if it's secure
set secure
" Directory specific .vimrc
call DoFindSourceLocalVimrc()
